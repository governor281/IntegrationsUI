/**
 * UF.DataAccess.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { ContactResponse } from '../model/contactResponse';
import { CsvItemHobsons } from '../model/csvItemHobsons';
import { FullSyncResponse } from '../model/fullSyncResponse';
import { HobsonCxTranslation } from '../model/hobsonCxTranslation';
import { LogDetailResponse } from '../model/logDetailResponse';
import { SuspendedItemResponse } from '../model/suspendedItemResponse';
import { TranslationResponse } from '../model/translationResponse';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { HobsonsServiceInterface } from './hobsons.serviceInterface';

@Injectable()
export class HobsonsService implements HobsonsServiceInterface {
  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.configuration.basePath = configuration.basePath || basePath || this.basePath;
    } else {
      this.configuration.basePath = basePath || this.basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * Delete the suspended item using the passed in ID from the Suspended Items DB
   * @param suspendedItemId Suspended Item IDs to delete
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsDeleteSuspendedItem(
    suspendedItemId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<SuspendedItemResponse>;
  public hobsonsDeleteSuspendedItem(
    suspendedItemId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsDeleteSuspendedItem(
    suspendedItemId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsDeleteSuspendedItem(
    suspendedItemId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (suspendedItemId === null || suspendedItemId === undefined) {
      throw new Error(
        'Required parameter suspendedItemId was null or undefined when calling hobsonsDeleteSuspendedItem.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/DeleteSuspendedItem`,
      suspendedItemId,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete the suspended item using the passed in ID from the Suspended Items DB
   * @param suspendedItems List of Suspended Item IDs to delete
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsDeleteSuspendedSelected(
    suspendedItems: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<SuspendedItemResponse>;
  public hobsonsDeleteSuspendedSelected(
    suspendedItems: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsDeleteSuspendedSelected(
    suspendedItems: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsDeleteSuspendedSelected(
    suspendedItems: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (suspendedItems === null || suspendedItems === undefined) {
      throw new Error(
        'Required parameter suspendedItems was null or undefined when calling hobsonsDeleteSuspendedSelected.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/DeleteSuspendedSelected`,
      suspendedItems,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves details regarding the employees
   * @param contactId Cx ID of the contact to retrieve information for
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetApiHobsons(
    contactId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ContactResponse>;
  public hobsonsGetApiHobsons(
    contactId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ContactResponse>>;
  public hobsonsGetApiHobsons(
    contactId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ContactResponse>>;
  public hobsonsGetApiHobsons(
    contactId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (contactId === null || contactId === undefined) {
      throw new Error('Required parameter contactId was null or undefined when calling hobsonsGetApiHobsons.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (contactId !== undefined && contactId !== null) {
      queryParameters = queryParameters.set('contactId', <any>contactId);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<ContactResponse>(`${this.configuration.basePath}/api/Hobsons`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Retrieves details regarding the employees
   * @param contactId Cx ID of the contact to retrieve information for
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetContactDetail(
    contactId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ContactResponse>;
  public hobsonsGetContactDetail(
    contactId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ContactResponse>>;
  public hobsonsGetContactDetail(
    contactId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ContactResponse>>;
  public hobsonsGetContactDetail(
    contactId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (contactId === null || contactId === undefined) {
      throw new Error('Required parameter contactId was null or undefined when calling hobsonsGetContactDetail.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (contactId !== undefined && contactId !== null) {
      queryParameters = queryParameters.set('contactId', <any>contactId);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<ContactResponse>(`${this.configuration.basePath}/api/Hobsons/GetContactDetail`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Initiates an import of Hobsons Radius data into Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetFullSync(observe?: 'body', reportProgress?: boolean): Observable<FullSyncResponse>;
  public hobsonsGetFullSync(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FullSyncResponse>>;
  public hobsonsGetFullSync(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FullSyncResponse>>;
  public hobsonsGetFullSync(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<FullSyncResponse>(`${this.configuration.basePath}/api/Hobsons/GetFullSync`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Retrieves data for the export from CX to Radius
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetRadiusExportData(observe?: 'body', reportProgress?: boolean): Observable<FullSyncResponse>;
  public hobsonsGetRadiusExportData(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FullSyncResponse>>;
  public hobsonsGetRadiusExportData(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FullSyncResponse>>;
  public hobsonsGetRadiusExportData(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<FullSyncResponse>(`${this.configuration.basePath}/api/Hobsons/GetRadiusExportData`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Retrieves items that were suspended during the import
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetSuspendedItems(observe?: 'body', reportProgress?: boolean): Observable<SuspendedItemResponse>;
  public hobsonsGetSuspendedItems(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsGetSuspendedItems(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsGetSuspendedItems(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<SuspendedItemResponse>(`${this.configuration.basePath}/api/Hobsons/GetSuspendedItems`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Displays the import log for the given date
   * @param exportDate Date the export from Hobsons Radius and import into Jenzabar CX occured.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetSyncLog(
    exportDate: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LogDetailResponse>;
  public hobsonsGetSyncLog(
    exportDate: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogDetailResponse>>;
  public hobsonsGetSyncLog(
    exportDate: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogDetailResponse>>;
  public hobsonsGetSyncLog(
    exportDate: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (exportDate === null || exportDate === undefined) {
      throw new Error('Required parameter exportDate was null or undefined when calling hobsonsGetSyncLog.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (exportDate !== undefined && exportDate !== null) {
      queryParameters = queryParameters.set('exportDate', <any>exportDate);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogDetailResponse>(`${this.configuration.basePath}/api/Hobsons/GetSyncLog`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Gets a distinct list of dates that can be used for import log information
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetSyncLogDates(observe?: 'body', reportProgress?: boolean): Observable<LogDetailResponse>;
  public hobsonsGetSyncLogDates(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogDetailResponse>>;
  public hobsonsGetSyncLogDates(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LogDetailResponse>>;
  public hobsonsGetSyncLogDates(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogDetailResponse>(`${this.configuration.basePath}/api/Hobsons/GetSyncLogDates`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Displays the import translation errors log for the given date
   * @param exportDate Date the export from Hobsons Radius and import into Jenzabar CX occured.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetSyncTranslationLog(
    exportDate: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LogDetailResponse>;
  public hobsonsGetSyncTranslationLog(
    exportDate: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogDetailResponse>>;
  public hobsonsGetSyncTranslationLog(
    exportDate: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogDetailResponse>>;
  public hobsonsGetSyncTranslationLog(
    exportDate: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (exportDate === null || exportDate === undefined) {
      throw new Error('Required parameter exportDate was null or undefined when calling hobsonsGetSyncTranslationLog.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (exportDate !== undefined && exportDate !== null) {
      queryParameters = queryParameters.set('exportDate', <any>exportDate);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogDetailResponse>(`${this.configuration.basePath}/api/Hobsons/GetSyncTranslationLog`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Retrieves items that were suspended during the import due to translation errors
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetTransSuspendedItems(observe?: 'body', reportProgress?: boolean): Observable<SuspendedItemResponse>;
  public hobsonsGetTransSuspendedItems(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsGetTransSuspendedItems(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsGetTransSuspendedItems(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/GetTransSuspendedItems`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the current list of translations for the Radius integration
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsGetTranslations(observe?: 'body', reportProgress?: boolean): Observable<TranslationResponse>;
  public hobsonsGetTranslations(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public hobsonsGetTranslations(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public hobsonsGetTranslations(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<TranslationResponse>(`${this.configuration.basePath}/api/Hobsons/GetTranslations`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Start the import process the suspended item using the passed in ID from the Suspended Items DB and creates new records the Jenzabar CX database
   * @param suspendedItemId ID of the suspended item to process as a new item in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsImportSuspendedItem(
    suspendedItemId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<SuspendedItemResponse>;
  public hobsonsImportSuspendedItem(
    suspendedItemId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsImportSuspendedItem(
    suspendedItemId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsImportSuspendedItem(
    suspendedItemId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (suspendedItemId === null || suspendedItemId === undefined) {
      throw new Error(
        'Required parameter suspendedItemId was null or undefined when calling hobsonsImportSuspendedItem.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/ImportSuspendedItem`,
      suspendedItemId,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Start the import process the suspended item using the passed in ID from the Suspended Items DB and creates new records the Jenzabar CX database
   * @param suspendedItems List of Suspended Item IDs to process as a new item in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsImportSuspendedSelected(
    suspendedItems: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<SuspendedItemResponse>;
  public hobsonsImportSuspendedSelected(
    suspendedItems: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsImportSuspendedSelected(
    suspendedItems: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsImportSuspendedSelected(
    suspendedItems: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (suspendedItems === null || suspendedItems === undefined) {
      throw new Error(
        'Required parameter suspendedItems was null or undefined when calling hobsonsImportSuspendedSelected.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/ImportSuspendedSelected`,
      suspendedItems,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Processes the Hobsons Radius data and updates the Jenzabar CX database
   * @param hobsonsData Serialized CsvItemHobsons object containing Hobsons Raduis data to import into Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsPost(hobsonsData: CsvItemHobsons, observe?: 'body', reportProgress?: boolean): Observable<object>;
  public hobsonsPost(
    hobsonsData: CsvItemHobsons,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<object>>;
  public hobsonsPost(
    hobsonsData: CsvItemHobsons,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<object>>;
  public hobsonsPost(
    hobsonsData: CsvItemHobsons,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (hobsonsData === null || hobsonsData === undefined) {
      throw new Error('Required parameter hobsonsData was null or undefined when calling hobsonsPost.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<object>(`${this.configuration.basePath}/api/Hobsons/Post`, hobsonsData, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates new records the Jenzabar CX database
   * @param suspendedItemId ID of the suspended item to process as a new item in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsPostSuspendedItem(
    suspendedItemId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<SuspendedItemResponse>;
  public hobsonsPostSuspendedItem(
    suspendedItemId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsPostSuspendedItem(
    suspendedItemId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsPostSuspendedItem(
    suspendedItemId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (suspendedItemId === null || suspendedItemId === undefined) {
      throw new Error(
        'Required parameter suspendedItemId was null or undefined when calling hobsonsPostSuspendedItem.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/PostSuspendedItem`,
      suspendedItemId,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new Translation in the CX database
   * @param tItem The translation object to create in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsPostTranslation(
    tItem: HobsonCxTranslation,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public hobsonsPostTranslation(
    tItem: HobsonCxTranslation,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public hobsonsPostTranslation(
    tItem: HobsonCxTranslation,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public hobsonsPostTranslation(
    tItem: HobsonCxTranslation,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (tItem === null || tItem === undefined) {
      throw new Error('Required parameter tItem was null or undefined when calling hobsonsPostTranslation.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TranslationResponse>(
      `${this.configuration.basePath}/api/Hobsons/PostTranslation`,
      tItem,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates the new adm record and updates the remaining records in the Jenzabar CX database
   * @param suspendedItemId ID of the suspended item to process as an update in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsPutSuspendedItem(
    suspendedItemId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<SuspendedItemResponse>;
  public hobsonsPutSuspendedItem(
    suspendedItemId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<SuspendedItemResponse>>;
  public hobsonsPutSuspendedItem(
    suspendedItemId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<SuspendedItemResponse>>;
  public hobsonsPutSuspendedItem(
    suspendedItemId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (suspendedItemId === null || suspendedItemId === undefined) {
      throw new Error('Required parameter suspendedItemId was null or undefined when calling hobsonsPutSuspendedItem.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<SuspendedItemResponse>(
      `${this.configuration.basePath}/api/Hobsons/PutSuspendedItem`,
      suspendedItemId,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates the new adm record and updates the remaining records in the Jenzabar CX database
   * @param tItem The translation object to update in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hobsonsPutTranslation(
    tItem: HobsonCxTranslation,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public hobsonsPutTranslation(
    tItem: HobsonCxTranslation,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public hobsonsPutTranslation(
    tItem: HobsonCxTranslation,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public hobsonsPutTranslation(
    tItem: HobsonCxTranslation,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (tItem === null || tItem === undefined) {
      throw new Error('Required parameter tItem was null or undefined when calling hobsonsPutTranslation.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<TranslationResponse>(
      `${this.configuration.basePath}/api/Hobsons/PutTranslation`,
      tItem,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
