/**
 * UF.DataAccess.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { CxTranslation } from '../model/cxTranslation';
import { LogDetailResponse } from '../model/logDetailResponse';
import { TranslationResponse } from '../model/translationResponse';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { WorkdayTranslationsServiceInterface } from './workdayTranslations.serviceInterface';

@Injectable()
export class WorkdayTranslationsService implements WorkdayTranslationsServiceInterface {
  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.configuration.basePath = configuration.basePath || basePath || this.basePath;
    } else {
      this.configuration.basePath = basePath || this.basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * Retrieves the current list of translations for the Workday integration
   * @param module
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsGetApiWorkdayTranslations(
    module: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public workdayTranslationsGetApiWorkdayTranslations(
    module: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public workdayTranslationsGetApiWorkdayTranslations(
    module: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public workdayTranslationsGetApiWorkdayTranslations(
    module: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (module === null || module === undefined) {
      throw new Error(
        'Required parameter module was null or undefined when calling workdayTranslationsGetApiWorkdayTranslations.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (module !== undefined && module !== null) {
      queryParameters = queryParameters.set('module', <any>module);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<TranslationResponse>(`${this.configuration.basePath}/api/WorkdayTranslations`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Gets a distinct list of dates that can be used for import log information
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsGetSyncLogDates(observe?: 'body', reportProgress?: boolean): Observable<LogDetailResponse>;
  public workdayTranslationsGetSyncLogDates(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogDetailResponse>>;
  public workdayTranslationsGetSyncLogDates(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogDetailResponse>>;
  public workdayTranslationsGetSyncLogDates(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogDetailResponse>(
      `${this.configuration.basePath}/api/WorkdayTranslations/GetSyncLogDates`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Displays the import translation errors log for the given date
   * @param exportDate
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsGetSyncTranslationLog(
    exportDate: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LogDetailResponse>;
  public workdayTranslationsGetSyncTranslationLog(
    exportDate: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogDetailResponse>>;
  public workdayTranslationsGetSyncTranslationLog(
    exportDate: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogDetailResponse>>;
  public workdayTranslationsGetSyncTranslationLog(
    exportDate: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (exportDate === null || exportDate === undefined) {
      throw new Error(
        'Required parameter exportDate was null or undefined when calling workdayTranslationsGetSyncTranslationLog.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (exportDate !== undefined && exportDate !== null) {
      queryParameters = queryParameters.set('exportDate', <any>exportDate);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogDetailResponse>(
      `${this.configuration.basePath}/api/WorkdayTranslations/GetSyncTranslationLog`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the current list of translations for the Workday integration
   * @param module
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsGetTranslations(
    module: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public workdayTranslationsGetTranslations(
    module: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public workdayTranslationsGetTranslations(
    module: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public workdayTranslationsGetTranslations(
    module: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (module === null || module === undefined) {
      throw new Error(
        'Required parameter module was null or undefined when calling workdayTranslationsGetTranslations.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (module !== undefined && module !== null) {
      queryParameters = queryParameters.set('module', <any>module);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<TranslationResponse>(
      `${this.configuration.basePath}/api/WorkdayTranslations/GetTranslations`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new Translation in the CX database
   * @param module
   * @param tItem The translation object to create in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsPostApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public workdayTranslationsPostApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public workdayTranslationsPostApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public workdayTranslationsPostApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (module === null || module === undefined) {
      throw new Error(
        'Required parameter module was null or undefined when calling workdayTranslationsPostApiWorkdayTranslations.'
      );
    }
    if (tItem === null || tItem === undefined) {
      throw new Error(
        'Required parameter tItem was null or undefined when calling workdayTranslationsPostApiWorkdayTranslations.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (module !== undefined && module !== null) {
      queryParameters = queryParameters.set('module', <any>module);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TranslationResponse>(`${this.configuration.basePath}/api/WorkdayTranslations`, tItem, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Creates a new Translation in the CX database
   * @param module
   * @param tItem The translation object to create in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsPostTranslation(
    module: string,
    tItem: CxTranslation,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public workdayTranslationsPostTranslation(
    module: string,
    tItem: CxTranslation,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public workdayTranslationsPostTranslation(
    module: string,
    tItem: CxTranslation,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public workdayTranslationsPostTranslation(
    module: string,
    tItem: CxTranslation,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (module === null || module === undefined) {
      throw new Error(
        'Required parameter module was null or undefined when calling workdayTranslationsPostTranslation.'
      );
    }
    if (tItem === null || tItem === undefined) {
      throw new Error(
        'Required parameter tItem was null or undefined when calling workdayTranslationsPostTranslation.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (module !== undefined && module !== null) {
      queryParameters = queryParameters.set('module', <any>module);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TranslationResponse>(
      `${this.configuration.basePath}/api/WorkdayTranslations/PostTranslation`,
      tItem,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates the new adm record and updates the remaining records in the Jenzabar CX database
   * @param module
   * @param tItem The translation object to update in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsPutApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public workdayTranslationsPutApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public workdayTranslationsPutApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public workdayTranslationsPutApiWorkdayTranslations(
    module: string,
    tItem: CxTranslation,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (module === null || module === undefined) {
      throw new Error(
        'Required parameter module was null or undefined when calling workdayTranslationsPutApiWorkdayTranslations.'
      );
    }
    if (tItem === null || tItem === undefined) {
      throw new Error(
        'Required parameter tItem was null or undefined when calling workdayTranslationsPutApiWorkdayTranslations.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (module !== undefined && module !== null) {
      queryParameters = queryParameters.set('module', <any>module);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<TranslationResponse>(`${this.configuration.basePath}/api/WorkdayTranslations`, tItem, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates the new adm record and updates the remaining records in the Jenzabar CX database
   * @param module
   * @param tItem The translation object to update in Jenzabar CX
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public workdayTranslationsPutTranslation(
    module: string,
    tItem: CxTranslation,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationResponse>;
  public workdayTranslationsPutTranslation(
    module: string,
    tItem: CxTranslation,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationResponse>>;
  public workdayTranslationsPutTranslation(
    module: string,
    tItem: CxTranslation,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationResponse>>;
  public workdayTranslationsPutTranslation(
    module: string,
    tItem: CxTranslation,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (module === null || module === undefined) {
      throw new Error(
        'Required parameter module was null or undefined when calling workdayTranslationsPutTranslation.'
      );
    }
    if (tItem === null || tItem === undefined) {
      throw new Error('Required parameter tItem was null or undefined when calling workdayTranslationsPutTranslation.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (module !== undefined && module !== null) {
      queryParameters = queryParameters.set('module', <any>module);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/xml',
      'text/xml',
      'application/x-www-form-urlencoded'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<TranslationResponse>(
      `${this.configuration.basePath}/api/WorkdayTranslations/PutTranslation`,
      tItem,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
