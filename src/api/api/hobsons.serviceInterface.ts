/**
 * UF.DataAccess.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders } from '@angular/common/http';

import { Observable } from 'rxjs';

import { ContactResponse } from '../model/contactResponse';
import { CsvItemHobsons } from '../model/csvItemHobsons';
import { FullSyncResponse } from '../model/fullSyncResponse';
import { HobsonCxTranslation } from '../model/hobsonCxTranslation';
import { LogDetailResponse } from '../model/logDetailResponse';
import { SuspendedItemResponse } from '../model/suspendedItemResponse';
import { TranslationResponse } from '../model/translationResponse';

import { Configuration } from '../configuration';

export interface HobsonsServiceInterface {
  defaultHeaders: HttpHeaders;
  configuration: Configuration;

  /**
   * Delete the suspended item using the passed in ID from the Suspended Items DB
   *
   * @param suspendedItemId Suspended Item IDs to delete
   */
  hobsonsDeleteSuspendedItem(suspendedItemId: string, extraHttpRequestParams?: any): Observable<SuspendedItemResponse>;

  /**
   * Delete the suspended item using the passed in ID from the Suspended Items DB
   *
   * @param suspendedItems List of Suspended Item IDs to delete
   */
  hobsonsDeleteSuspendedSelected(
    suspendedItems: Array<string>,
    extraHttpRequestParams?: any
  ): Observable<SuspendedItemResponse>;

  /**
   * Retrieves details regarding the employees
   *
   * @param contactId Cx ID of the contact to retrieve information for
   */
  hobsonsGetApiHobsons(contactId: string, extraHttpRequestParams?: any): Observable<ContactResponse>;

  /**
   * Retrieves details regarding the employees
   *
   * @param contactId Cx ID of the contact to retrieve information for
   */
  hobsonsGetContactDetail(contactId: string, extraHttpRequestParams?: any): Observable<ContactResponse>;

  /**
   * Initiates an import of Hobsons Radius data into Jenzabar CX
   *
   */
  hobsonsGetFullSync(extraHttpRequestParams?: any): Observable<FullSyncResponse>;

  /**
   * Retrieves data for the export from CX to Radius
   *
   */
  hobsonsGetRadiusExportData(extraHttpRequestParams?: any): Observable<FullSyncResponse>;

  /**
   * Retrieves items that were suspended during the import
   *
   */
  hobsonsGetSuspendedItems(extraHttpRequestParams?: any): Observable<SuspendedItemResponse>;

  /**
   * Displays the import log for the given date
   *
   * @param exportDate Date the export from Hobsons Radius and import into Jenzabar CX occured.
   */
  hobsonsGetSyncLog(exportDate: string, extraHttpRequestParams?: any): Observable<LogDetailResponse>;

  /**
   * Gets a distinct list of dates that can be used for import log information
   *
   */
  hobsonsGetSyncLogDates(extraHttpRequestParams?: any): Observable<LogDetailResponse>;

  /**
   * Displays the import translation errors log for the given date
   *
   * @param exportDate Date the export from Hobsons Radius and import into Jenzabar CX occured.
   */
  hobsonsGetSyncTranslationLog(exportDate: string, extraHttpRequestParams?: any): Observable<LogDetailResponse>;

  /**
   * Retrieves items that were suspended during the import due to translation errors
   *
   */
  hobsonsGetTransSuspendedItems(extraHttpRequestParams?: any): Observable<SuspendedItemResponse>;

  /**
   * Retrieves the current list of translations for the Radius integration
   *
   */
  hobsonsGetTranslations(extraHttpRequestParams?: any): Observable<TranslationResponse>;

  /**
   * Start the import process the suspended item using the passed in ID from the Suspended Items DB and creates new records the Jenzabar CX database
   *
   * @param suspendedItemId ID of the suspended item to process as a new item in Jenzabar CX
   */
  hobsonsImportSuspendedItem(suspendedItemId: string, extraHttpRequestParams?: any): Observable<SuspendedItemResponse>;

  /**
   * Start the import process the suspended item using the passed in ID from the Suspended Items DB and creates new records the Jenzabar CX database
   *
   * @param suspendedItems List of Suspended Item IDs to process as a new item in Jenzabar CX
   */
  hobsonsImportSuspendedSelected(
    suspendedItems: Array<string>,
    extraHttpRequestParams?: any
  ): Observable<SuspendedItemResponse>;

  /**
   * Processes the Hobsons Radius data and updates the Jenzabar CX database
   *
   * @param hobsonsData Serialized CsvItemHobsons object containing Hobsons Raduis data to import into Jenzabar CX
   */
  hobsonsPost(hobsonsData: CsvItemHobsons, extraHttpRequestParams?: any): Observable<object>;

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates new records the Jenzabar CX database
   *
   * @param suspendedItemId ID of the suspended item to process as a new item in Jenzabar CX
   */
  hobsonsPostSuspendedItem(suspendedItemId: string, extraHttpRequestParams?: any): Observable<SuspendedItemResponse>;

  /**
   * Creates a new Translation in the CX database
   *
   * @param tItem The translation object to create in Jenzabar CX
   */
  hobsonsPostTranslation(tItem: HobsonCxTranslation, extraHttpRequestParams?: any): Observable<TranslationResponse>;

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates the new adm record and updates the remaining records in the Jenzabar CX database
   *
   * @param suspendedItemId ID of the suspended item to process as an update in Jenzabar CX
   */
  hobsonsPutSuspendedItem(suspendedItemId: string, extraHttpRequestParams?: any): Observable<SuspendedItemResponse>;

  /**
   * Retrieves the suspended item using the passed in ID from the Suspended Items DB and creates the new adm record and updates the remaining records in the Jenzabar CX database
   *
   * @param tItem The translation object to update in Jenzabar CX
   */
  hobsonsPutTranslation(tItem: HobsonCxTranslation, extraHttpRequestParams?: any): Observable<TranslationResponse>;
}
