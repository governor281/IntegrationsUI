/**
 * UF.DataAccess.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { LogEntryDetailResponse } from '../model/logEntryDetailResponse';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { LogEntryDetailServiceInterface } from './logEntryDetail.serviceInterface';

@Injectable()
export class LogEntryDetailService implements LogEntryDetailServiceInterface {
  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.configuration.basePath = configuration.basePath || basePath || this.basePath;
    } else {
      this.configuration.basePath = basePath || this.basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * Gets log data for specified Id
   * @param id1
   * @param id2
   * @param logType
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logEntryDetailGetApiLogEntryDetail(
    id1: string,
    id2: string,
    logType: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LogEntryDetailResponse>;
  public logEntryDetailGetApiLogEntryDetail(
    id1: string,
    id2: string,
    logType: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogEntryDetailResponse>>;
  public logEntryDetailGetApiLogEntryDetail(
    id1: string,
    id2: string,
    logType: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogEntryDetailResponse>>;
  public logEntryDetailGetApiLogEntryDetail(
    id1: string,
    id2: string,
    logType: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id1 === null || id1 === undefined) {
      throw new Error('Required parameter id1 was null or undefined when calling logEntryDetailGetApiLogEntryDetail.');
    }
    if (id2 === null || id2 === undefined) {
      throw new Error('Required parameter id2 was null or undefined when calling logEntryDetailGetApiLogEntryDetail.');
    }
    if (logType === null || logType === undefined) {
      throw new Error(
        'Required parameter logType was null or undefined when calling logEntryDetailGetApiLogEntryDetail.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (id1 !== undefined && id1 !== null) {
      queryParameters = queryParameters.set('id1', <any>id1);
    }
    if (id2 !== undefined && id2 !== null) {
      queryParameters = queryParameters.set('id2', <any>id2);
    }
    if (logType !== undefined && logType !== null) {
      queryParameters = queryParameters.set('logType', <any>logType);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogEntryDetailResponse>(`${this.configuration.basePath}/api/LogEntryDetail`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Gets log data for specified Id
   * @param id1
   * @param id2
   * @param logType
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logEntryDetailGetLogEntryDetails(
    id1: string,
    id2: string,
    logType: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LogEntryDetailResponse>;
  public logEntryDetailGetLogEntryDetails(
    id1: string,
    id2: string,
    logType: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogEntryDetailResponse>>;
  public logEntryDetailGetLogEntryDetails(
    id1: string,
    id2: string,
    logType: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogEntryDetailResponse>>;
  public logEntryDetailGetLogEntryDetails(
    id1: string,
    id2: string,
    logType: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id1 === null || id1 === undefined) {
      throw new Error('Required parameter id1 was null or undefined when calling logEntryDetailGetLogEntryDetails.');
    }
    if (id2 === null || id2 === undefined) {
      throw new Error('Required parameter id2 was null or undefined when calling logEntryDetailGetLogEntryDetails.');
    }
    if (logType === null || logType === undefined) {
      throw new Error(
        'Required parameter logType was null or undefined when calling logEntryDetailGetLogEntryDetails.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (id1 !== undefined && id1 !== null) {
      queryParameters = queryParameters.set('id1', <any>id1);
    }
    if (id2 !== undefined && id2 !== null) {
      queryParameters = queryParameters.set('id2', <any>id2);
    }
    if (logType !== undefined && logType !== null) {
      queryParameters = queryParameters.set('logType', <any>logType);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogEntryDetailResponse>(
      `${this.configuration.basePath}/api/LogEntryDetail/GetLogEntryDetails`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Test email notification
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logEntryDetailTestEmailNotification(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LogEntryDetailResponse>;
  public logEntryDetailTestEmailNotification(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LogEntryDetailResponse>>;
  public logEntryDetailTestEmailNotification(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LogEntryDetailResponse>>;
  public logEntryDetailTestEmailNotification(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json', 'text/json', 'application/xml', 'text/xml'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.get<LogEntryDetailResponse>(
      `${this.configuration.basePath}/api/LogEntryDetail/TestEmailNotification`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
